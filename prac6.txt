Write a program to implement MySQL/Oracle database connectivity with any front-end language to
 implement Database navigation operations (add, delete, edit etc.)
ChatGPT said:
ChatGPT
Hereâ€™s an example of how to implement MySQL database connectivity with a Python front-end using the Tkinter library for the graphical user interface (GUI) and the MySQL Connector for database connectivity. The program demonstrates basic database navigation operations such as adding, deleting, editing, and viewing records.

Steps:
Install necessary packages.
Create a simple Tkinter GUI.
Establish connection to a MySQL database.
Implement CRUD operations (Create, Read, Update, Delete).


Step 1: Install the Required Packages

You need to install mysql-connector-python for database interaction and Tkinter for creating the GUI.

Install MySQL Connector for Python:


pip install mysql-connector-python


Tkinter is usually pre-installed with Python. If not, you can install it via:

Windows: Tkinter comes bundled with Python.


Step 2: Create the MySQL Database and Table
Create a MySQL database and table for storing the employee information.

SQL to Create Database and Table

CREATE DATABASE employee_db;
USE employee_db;

CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    salary DECIMAL(10, 2)
);




Step 3: Python Code for Front-End with Database Connectivity
The Python script uses Tkinter for the GUI and mysql-connector-python to perform operations on the MySQL database.







Python Code:




import tkinter as tk
from tkinter import messagebox
import mysql.connector

# Database connection
def connect_to_db():
    return mysql.connector.connect(
        host="localhost",
        user="root",   # Use your MySQL username
        password="password",  # Use your MySQL password
        database="employee_db"  # Name of the database created above
    )

# Function to Add Employee
def add_employee():
    conn = connect_to_db()
    cursor = conn.cursor()
    query = "INSERT INTO employees (first_name, last_name, department, salary) VALUES (%s, %s, %s, %s)"
    values = (first_name_entry.get(), last_name_entry.get(), department_entry.get(), salary_entry.get())
    cursor.execute(query, values)
    conn.commit()
    cursor.close()
    conn.close()
    messagebox.showinfo("Success", "Employee added successfully")
    clear_entries()

# Function to View Employees
def view_employees():
    conn = connect_to_db()
    cursor = conn.cursor()
    query = "SELECT * FROM employees"
    cursor.execute(query)
    rows = cursor.fetchall()
    result = ""
    for row in rows:
        result += f"ID: {row[0]}, Name: {row[1]} {row[2]}, Department: {row[3]}, Salary: {row[4]}\n"
    employee_list_label.config(text=result)
    cursor.close()
    conn.close()

# Function to Delete Employee by ID
def delete_employee():
    conn = connect_to_db()
    cursor = conn.cursor()
    query = "DELETE FROM employees WHERE id = %s"
    cursor.execute(query, (employee_id_entry.get(),))
    conn.commit()
    cursor.close()
    conn.close()
    messagebox.showinfo("Success", "Employee deleted successfully")
    clear_entries()

# Function to Update Employee by ID
def update_employee():
    conn = connect_to_db()
    cursor = conn.cursor()
    query = """
    UPDATE employees 
    SET first_name = %s, last_name = %s, department = %s, salary = %s 
    WHERE id = %s
    """
    values = (first_name_entry.get(), last_name_entry.get(), department_entry.get(), salary_entry.get(), employee_id_entry.get())
    cursor.execute(query, values)
    conn.commit()
    cursor.close()
    conn.close()
    messagebox.showinfo("Success", "Employee updated successfully")
    clear_entries()

# Clear input fields
def clear_entries():
    employee_id_entry.delete(0, tk.END)
    first_name_entry.delete(0, tk.END)
    last_name_entry.delete(0, tk.END)
    department_entry.delete(0, tk.END)
    salary_entry.delete(0, tk.END)

# Setting up the Tkinter Window
root = tk.Tk()
root.title("Employee Management System")

# Labels and Entries for Input Fields
tk.Label(root, text="Employee ID:").grid(row=0, column=0, padx=10, pady=10)
employee_id_entry = tk.Entry(root)
employee_id_entry.grid(row=0, column=1, padx=10, pady=10)

tk.Label(root, text="First Name:").grid(row=1, column=0, padx=10, pady=10)
first_name_entry = tk.Entry(root)
first_name_entry.grid(row=1, column=1, padx=10, pady=10)

tk.Label(root, text="Last Name:").grid(row=2, column=0, padx=10, pady=10)
last_name_entry = tk.Entry(root)
last_name_entry.grid(row=2, column=1, padx=10, pady=10)

tk.Label(root, text="Department:").grid(row=3, column=0, padx=10, pady=10)
department_entry = tk.Entry(root)
department_entry.grid(row=3, column=1, padx=10, pady=10)

tk.Label(root, text="Salary:").grid(row=4, column=0, padx=10, pady=10)
salary_entry = tk.Entry(root)
salary_entry.grid(row=4, column=1, padx=10, pady=10)

# Buttons for CRUD operations
tk.Button(root, text="Add Employee", command=add_employee).grid(row=5, column=0, padx=10, pady=10)
tk.Button(root, text="Update Employee", command=update_employee).grid(row=5, column=1, padx=10, pady=10)
tk.Button(root, text="Delete Employee", command=delete_employee).grid(row=6, column=0, padx=10, pady=10)
tk.Button(root, text="View Employees", command=view_employees).grid(row=6, column=1, padx=10, pady=10)

# Label to display employee records
employee_list_label = tk.Label(root, text="")
employee_list_label.grid(row=7, column=0, columnspan=2, padx=10, pady=10)

# Start the Tkinter event loop
root.mainloop()







Explanation of the Code:
Database Connection (connect_to_db):

The connect_to_db() function connects to the MySQL database using mysql-connector-python.
Adjust the host, user, password, and database to match your MySQL server settings.
CRUD Operations:

Add Employee: Inserts a new employee record into the database using INSERT INTO.
View Employees: Fetches and displays all employee records using SELECT *.
Delete Employee: Deletes an employee based on their ID using DELETE FROM.
Update Employee: Updates an employee's information based on their ID using UPDATE.
GUI using Tkinter:

Input Fields: There are input fields for Employee ID, First Name, Last Name, Department, and Salary.
Buttons: There are buttons for Add, Update, Delete, and View operations.
Employee List Label: This label displays the employee records fetched from the database.
Message Box:

The messagebox.showinfo is used to display success or error messages after performing operations.
Step 4: Running the Program
Ensure MySQL server is running, and you have created the employee_db database and employees table.
Run the Python script:
bash
Copy code
python employee_management.py
Use the GUI to add, edit, delete, and view employee records.

Conclusion:

This program demonstrates how to connect a Python front-end (Tkinter) to a MySQL database, implementing database navigation operations such as Add, Edit, Delete, and View records. You can modify this code to suit other use cases, such as connecting it with an Oracle database by changing the connection setup.